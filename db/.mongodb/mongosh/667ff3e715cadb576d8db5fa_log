{"t":{"$date":"2024-06-29T11:45:43.584Z"},"s":"I","c":"MONGOSH","id":1000000000,"ctx":"log","msg":"Starting log","attr":{"execPath":"/usr/bin/mongosh","envInfo":{"EDITOR":null,"NODE_OPTIONS":null,"TERM":"xterm"},"version":"2.2.6","distributionKind":"compiled","buildArch":"arm64","buildPlatform":"linux","buildTarget":"linux-arm64","buildTime":"2024-05-16T17:48:57.722Z","gitVersion":"6d11de2ccf5cdb827d7c170d0e7d1778aa98a0bc","nodeVersion":"v20.12.2","opensslVersion":"3.0.13+quic","sharedOpenssl":false,"runtimeArch":"arm64","runtimePlatform":"linux","runtimeGlibcVersion":"2.35","deps":{"nodeDriverVersion":"6.6.2","libmongocryptVersion":"1.9.0-20230828+git8e7f69f1c0","libmongocryptNodeBindingsVersion":"6.0.0","kerberosVersion":"2.1.0"}}}
{"t":{"$date":"2024-06-29T11:45:43.589Z"},"s":"I","c":"MONGOSH","id":1000000005,"ctx":"config","msg":"User updated"}
{"t":{"$date":"2024-06-29T11:45:43.589Z"},"s":"I","c":"MONGOSH","id":1000000048,"ctx":"config","msg":"Loading global configuration file","attr":{"filename":"/etc/mongosh.conf","found":false}}
{"t":{"$date":"2024-06-29T11:45:43.603Z"},"s":"I","c":"DEVTOOLS-CONNECT","id":1000000042,"ctx":"mongosh-connect","msg":"Initiating connection attempt","attr":{"uri":"mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.2.6","driver":{"name":"nodejs|mongosh","version":"6.6.2|2.2.6"},"devtoolsConnectVersion":"2.6.3","host":"127.0.0.1:27017"}}
{"t":{"$date":"2024-06-29T11:45:43.606Z"},"s":"I","c":"DEVTOOLS-CONNECT","id":1000000035,"ctx":"mongosh-connect","msg":"Server heartbeat succeeded","attr":{"connectionId":"127.0.0.1:27017"}}
{"t":{"$date":"2024-06-29T11:45:43.611Z"},"s":"I","c":"DEVTOOLS-CONNECT","id":1000000037,"ctx":"mongosh-connect","msg":"Connection attempt finished"}
{"t":{"$date":"2024-06-29T11:45:43.619Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"session_id":"667ff3e715cadb576d8db5fa","userId":null,"telemetryAnonymousId":"667ff1038e489805118db5f9","connectionUri":"mongodb://<ip address>:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.2.6","is_atlas":false,"is_localhost":true,"is_do":false,"server_version":"7.0.11","node_version":"v20.12.2","mongosh_version":"2.2.6","server_os":"linux","server_arch":"aarch64","is_enterprise":false,"auth_type":null,"is_data_federation":false,"is_stream":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","is_local_atlas":false,"fcv":"7.0","api_version":null,"api_strict":null,"api_deprecation_errors":null}}
{"t":{"$date":"2024-06-29T11:45:43.620Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"adminCommand","class":"Database","db":"test","arguments":{"cmd":{"ping":1}}}}
{"t":{"$date":"2024-06-29T11:45:43.621Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getSiblingDB","class":"Database","db":"test","arguments":{"db":"admin"}}}
{"t":{"$date":"2024-06-29T11:45:43.643Z"},"s":"I","c":"MONGOSH","id":1000000010,"ctx":"shell-api","msg":"Initialized context","attr":{"method":"setCtx","arguments":{}}}
{"t":{"$date":"2024-06-29T11:45:43.645Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"adminCommand","class":"Database","db":"test","arguments":{"cmd":{"getLog":"startupWarnings"}}}}
{"t":{"$date":"2024-06-29T11:45:43.645Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getSiblingDB","class":"Database","db":"test","arguments":{"db":"admin"}}}
{"t":{"$date":"2024-06-29T11:45:43.646Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"hello","class":"Database","db":"test","arguments":{}}}
{"t":{"$date":"2024-06-29T11:45:43.646Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000024,"ctx":"snippets","msg":"Fetching snippet index","attr":{"refreshMode":"allow-cached"}}
{"t":{"$date":"2024-06-29T11:45:43.647Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000019,"ctx":"snippets","msg":"Loaded snippets","attr":{"installdir":"/data/db/.mongodb/mongosh/snippets"}}
{"t":{"$date":"2024-06-29T11:45:43.650Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000027,"ctx":"snippets","msg":"Fetching snippet index done"}
{"t":{"$date":"2024-06-29T11:45:43.651Z"},"s":"I","c":"MONGOSH","id":1000000002,"ctx":"repl","msg":"Started REPL","attr":{"version":"2.2.6"}}
{"t":{"$date":"2024-06-29T11:45:44.818Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2024-06-29T11:45:45.459Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"config"}}
{"t":{"$date":"2024-06-29T11:45:46.271Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"ls"}}
{"t":{"$date":"2024-06-29T11:45:46.280Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000032,"ctx":"snippets","msg":"Rewrote error message","attr":{"error":"ls is not defined","addition":"Are you trying to run a script written for the legacy shell? Try running `snippet install mongocompat`","name":"@mongosh/snippet-mongocompat"}}
{"t":{"$date":"2024-06-29T11:45:46.280Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: ls is not defined (Are you trying to run a script written for the legacy shell? Try running `snippet install mongocompat`)","attr":{"message":"ls is not defined (Are you trying to run a script written for the legacy shell? Try running `snippet install mongocompat`)","name":"ReferenceError","stack":"ReferenceError: ls is not defined (Are you trying to run a script written for the legacy shell? Try running `snippet install mongocompat`)\n    at REPL3:67:38\n    at REPL3:81:5\n    at REPL3:85:3\n    at ContextifyScript.runInContext (node:vm:148:12)\n    at PrettyREPLServer.defaultEval (node:repl:600:22)\n    at bound (node:domain:432:15)\n    at PrettyREPLServer.runBound (node:domain:443:12)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12446)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12169)\n    at node:internal/util:430:7","cause":null}}
{"t":{"$date":"2024-06-29T11:45:49.975Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Missing semicolon. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m user awesomepawsome\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"MissingSemicolon","loc":{"line":1,"column":4,"index":4},"pos":4,"message":"Missing semicolon. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m user awesomepawsome\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Missing semicolon. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m user awesomepawsome\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n","cause":null}}
{"t":{"$date":"2024-06-29T11:45:52.593Z"},"s":"I","c":"MONGOSH","id":1000000008,"ctx":"shell-api","msg":"Used \"use\" command","attr":{"db":"awesomepawsome"}}
{"t":{"$date":"2024-06-29T11:45:53.367Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"ls"}}
{"t":{"$date":"2024-06-29T11:45:53.374Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000032,"ctx":"snippets","msg":"Rewrote error message","attr":{"error":"ls is not defined","addition":"Are you trying to run a script written for the legacy shell? Try running `snippet install mongocompat`","name":"@mongosh/snippet-mongocompat"}}
{"t":{"$date":"2024-06-29T11:45:53.375Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: ls is not defined (Are you trying to run a script written for the legacy shell? Try running `snippet install mongocompat`)","attr":{"message":"ls is not defined (Are you trying to run a script written for the legacy shell? Try running `snippet install mongocompat`)","name":"ReferenceError","stack":"ReferenceError: ls is not defined (Are you trying to run a script written for the legacy shell? Try running `snippet install mongocompat`)\n    at REPL6:67:38\n    at REPL6:81:5\n    at REPL6:85:3\n    at ContextifyScript.runInContext (node:vm:148:12)\n    at PrettyREPLServer.defaultEval (node:repl:600:22)\n    at bound (node:domain:432:15)\n    at PrettyREPLServer.runBound (node:domain:443:12)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12446)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12169)\n    at node:internal/util:430:7","cause":null}}
{"t":{"$date":"2024-06-29T11:45:55.178Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"dir"}}
{"t":{"$date":"2024-06-29T11:45:55.185Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: dir is not defined","attr":{"message":"dir is not defined","name":"ReferenceError","stack":"ReferenceError: dir is not defined\n    at REPL7:67:39\n    at REPL7:81:5\n    at REPL7:85:3\n    at ContextifyScript.runInContext (node:vm:148:12)\n    at PrettyREPLServer.defaultEval (node:repl:600:22)\n    at bound (node:domain:432:15)\n    at PrettyREPLServer.runBound (node:domain:443:12)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12446)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12169)\n    at node:internal/util:430:7","cause":null}}
{"t":{"$date":"2024-06-29T11:45:59.327Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show collecitons"}}
{"t":{"$date":"2024-06-29T11:45:59.330Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"shell-api","msg":"MongoshInvalidInputError: [COMMON-10001] 'collecitons' is not a valid argument for \"show\".","attr":{"stack":"MongoshInvalidInputError: [COMMON-10001] 'collecitons' is not a valid argument for \"show\".\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:372877)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319989)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at t.eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:314686)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:434432)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319989)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at o.eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:314686)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)","name":"MongoshInvalidInputError","message":"[COMMON-10001] 'collecitons' is not a valid argument for \"show\".","code":"COMMON-10001","scope":"COMMON","metadata":null}}
{"t":{"$date":"2024-06-29T11:45:59.335Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoshInvalidInputError: [COMMON-10001] 'collecitons' is not a valid argument for \"show\".","attr":{"name":"MongoshInvalidInputError","code":"COMMON-10001","scope":"COMMON","metadata":null,"message":"[COMMON-10001] 'collecitons' is not a valid argument for \"show\".","stack":"MongoshInvalidInputError: [COMMON-10001] 'collecitons' is not a valid argument for \"show\".\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:372877)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319989)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at t.eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:314686)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:434432)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319989)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at o.eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:314686)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)","cause":null}}
{"t":{"$date":"2024-06-29T11:46:01.569Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show collections"}}
{"t":{"$date":"2024-06-29T11:46:03.513Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show orders"}}
{"t":{"$date":"2024-06-29T11:46:03.520Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"shell-api","msg":"MongoshInvalidInputError: [COMMON-10001] 'orders' is not a valid argument for \"show\".","attr":{"stack":"MongoshInvalidInputError: [COMMON-10001] 'orders' is not a valid argument for \"show\".\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:372877)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319989)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at t.eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:314686)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:434432)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319989)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at o.eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:314686)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)","name":"MongoshInvalidInputError","message":"[COMMON-10001] 'orders' is not a valid argument for \"show\".","code":"COMMON-10001","scope":"COMMON","metadata":null}}
{"t":{"$date":"2024-06-29T11:46:03.522Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoshInvalidInputError: [COMMON-10001] 'orders' is not a valid argument for \"show\".","attr":{"name":"MongoshInvalidInputError","code":"COMMON-10001","scope":"COMMON","metadata":null,"message":"[COMMON-10001] 'orders' is not a valid argument for \"show\".","stack":"MongoshInvalidInputError: [COMMON-10001] 'orders' is not a valid argument for \"show\".\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:372877)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319989)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at t.eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:314686)\n    at t.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:434432)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319989)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)\n    at o.eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:314686)\n    at o.show (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:213:319058)","cause":null}}
{"t":{"$date":"2024-06-29T11:46:14.385Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"dbCollection"}}
{"t":{"$date":"2024-06-29T11:46:14.390Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: dbCollection is not defined","attr":{"message":"dbCollection is not defined","name":"ReferenceError","stack":"ReferenceError: dbCollection is not defined\n    at REPL11:67:48\n    at REPL11:81:5\n    at REPL11:85:3\n    at ContextifyScript.runInContext (node:vm:148:12)\n    at PrettyREPLServer.defaultEval (node:repl:600:22)\n    at bound (node:domain:432:15)\n    at PrettyREPLServer.runBound (node:domain:443:12)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12446)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12169)\n    at node:internal/util:430:7","cause":null}}
{"t":{"$date":"2024-06-29T11:46:34.015Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"listDatabases"}}
{"t":{"$date":"2024-06-29T11:46:34.020Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: listDatabases is not defined","attr":{"message":"listDatabases is not defined","name":"ReferenceError","stack":"ReferenceError: listDatabases is not defined\n    at REPL12:67:49\n    at REPL12:81:5\n    at REPL12:85:3\n    at ContextifyScript.runInContext (node:vm:148:12)\n    at PrettyREPLServer.defaultEval (node:repl:600:22)\n    at bound (node:domain:432:15)\n    at PrettyREPLServer.runBound (node:domain:443:12)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12446)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12169)\n    at node:internal/util:430:7","cause":null}}
{"t":{"$date":"2024-06-29T11:46:56.103Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.CollectionName.find(orders)"}}
{"t":{"$date":"2024-06-29T11:46:56.109Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: orders is not defined","attr":{"message":"orders is not defined","name":"ReferenceError","stack":"ReferenceError: orders is not defined\n    at REPL13:67:238\n    at REPL13:81:5\n    at REPL13:85:3\n    at ContextifyScript.runInContext (node:vm:148:12)\n    at PrettyREPLServer.defaultEval (node:repl:600:22)\n    at bound (node:domain:432:15)\n    at PrettyREPLServer.runBound (node:domain:443:12)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12446)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12169)\n    at node:internal/util:430:7","cause":null}}
{"t":{"$date":"2024-06-29T11:46:58.891Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.CollectionName.find(cart)"}}
{"t":{"$date":"2024-06-29T11:46:58.897Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: cart is not defined","attr":{"message":"cart is not defined","name":"ReferenceError","stack":"ReferenceError: cart is not defined\n    at REPL14:67:236\n    at REPL14:81:5\n    at REPL14:85:3\n    at ContextifyScript.runInContext (node:vm:148:12)\n    at PrettyREPLServer.defaultEval (node:repl:600:22)\n    at bound (node:domain:432:15)\n    at PrettyREPLServer.runBound (node:domain:443:12)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12446)\n    at eval (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:135:12169)\n    at node:internal/util:430:7","cause":null}}
{"t":{"$date":"2024-06-29T11:47:03.814Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"var collections = db.getCollectionNames();"}}
{"t":{"$date":"2024-06-29T11:47:03.818Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollectionNames","class":"Database","db":"awesomepawsome","arguments":{}}}
{"t":{"$date":"2024-06-29T11:47:04.365Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"for(var i = 0; i< collections.length; i++){    \n   print('Collection: ' + collections[i]); // print the name of each collection\n   db.getCollection(collections[i]).find().forEach(printjson); //and then print the json of each of its elements\n}"}}
{"t":{"$date":"2024-06-29T11:47:04.372Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"orders"}}}
{"t":{"$date":"2024-06-29T11:47:04.373Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"orders","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T11:47:04.376Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"users"}}}
{"t":{"$date":"2024-06-29T11:47:04.377Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"users","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T11:47:04.383Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"products"}}}
{"t":{"$date":"2024-06-29T11:47:04.384Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"products","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T11:47:04.385Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"reviews"}}}
{"t":{"$date":"2024-06-29T11:47:04.386Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"reviews","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T11:47:04.389Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"carts"}}}
{"t":{"$date":"2024-06-29T11:47:04.389Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"carts","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:00:24.780Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"for (var i = 0; i < collections.length; i++) { print('Collection: ' + collections[i]); /* print the name of each collection*/ db.getCollection(collections[i]).find().forEach(printjson); /*and then print the json of each of its elements*/ }"}}
{"t":{"$date":"2024-06-29T16:00:24.787Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"orders"}}}
{"t":{"$date":"2024-06-29T16:00:24.788Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"orders","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:00:24.791Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"users"}}}
{"t":{"$date":"2024-06-29T16:00:24.791Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"users","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:00:24.797Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"products"}}}
{"t":{"$date":"2024-06-29T16:00:24.797Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"products","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:00:24.798Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"reviews"}}}
{"t":{"$date":"2024-06-29T16:00:24.799Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"reviews","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:00:24.800Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"carts"}}}
{"t":{"$date":"2024-06-29T16:00:24.801Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"carts","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:25:55.554Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"for (var i = 0; i < collections.length; i++) { print('Collection: ' + collections[i]); /* print the name of each collection*/ db.getCollection(collections[i]).find().forEach(printjson); /*and then print the json of each of its elements*/ }"}}
{"t":{"$date":"2024-06-29T16:25:55.559Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"orders"}}}
{"t":{"$date":"2024-06-29T16:25:55.560Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"orders","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:25:55.562Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"users"}}}
{"t":{"$date":"2024-06-29T16:25:55.566Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"users","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:25:55.570Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"products"}}}
{"t":{"$date":"2024-06-29T16:25:55.570Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"products","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:25:55.572Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"reviews"}}}
{"t":{"$date":"2024-06-29T16:25:55.573Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"reviews","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:25:55.573Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"carts"}}}
{"t":{"$date":"2024-06-29T16:25:55.574Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"carts","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:12.289Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"var collections = \"orders\""}}
{"t":{"$date":"2024-06-29T16:26:13.110Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"for (var i = 0; i < collections.length; i++) { print('Collection: ' + collections[i]); /* print the name of each collection*/ db.getCollection(collections[i]).find().forEach(printjson); /*and then print the json of each of its elements*/ }"}}
{"t":{"$date":"2024-06-29T16:26:13.116Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"o"}}}
{"t":{"$date":"2024-06-29T16:26:13.118Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"o","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:13.119Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"r"}}}
{"t":{"$date":"2024-06-29T16:26:13.119Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"r","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:13.120Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"d"}}}
{"t":{"$date":"2024-06-29T16:26:13.121Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"d","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:13.123Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"e"}}}
{"t":{"$date":"2024-06-29T16:26:13.124Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"e","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:13.124Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"r"}}}
{"t":{"$date":"2024-06-29T16:26:13.125Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"r","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:13.126Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"s"}}}
{"t":{"$date":"2024-06-29T16:26:13.126Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"s","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:17.805Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"var collections = db.getCollectionNames();"}}
{"t":{"$date":"2024-06-29T16:26:17.813Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollectionNames","class":"Database","db":"awesomepawsome","arguments":{}}}
{"t":{"$date":"2024-06-29T16:26:19.151Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"for (var i = 0; i < collections.length; i++) { print('Collection: ' + collections[i]); /* print the name of each collection*/ db.getCollection(collections[i]).find().forEach(printjson); /*and then print the json of each of its elements*/ }"}}
{"t":{"$date":"2024-06-29T16:26:19.156Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"orders"}}}
{"t":{"$date":"2024-06-29T16:26:19.158Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"orders","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:19.161Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"users"}}}
{"t":{"$date":"2024-06-29T16:26:19.162Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"users","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:19.167Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"products"}}}
{"t":{"$date":"2024-06-29T16:26:19.167Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"products","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:19.169Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"reviews"}}}
{"t":{"$date":"2024-06-29T16:26:19.169Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"reviews","arguments":{"options":{}}}}
{"t":{"$date":"2024-06-29T16:26:19.171Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getCollection","class":"Database","db":"awesomepawsome","arguments":{"coll":"carts"}}}
{"t":{"$date":"2024-06-29T16:26:19.171Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"awesomepawsome","coll":"carts","arguments":{"options":{}}}}
