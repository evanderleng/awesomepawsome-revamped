

/api/user/login
POST body required: username, password
returns: message, jwt token httpOnly cookie 
returns 200 OR 401

/api/user/addUser
POST body required: username, password, email
returns: message
returns 400, 201, 500

/api/product/getProduct
GET body optional: brand, animal etc (filter) (to view all, have no input fields)
returns: product array json (lmk if u need pagination)
returns 200, 500

/api/review/getReview?product_id=xxx     (get all reviews for a specific product)
GET
returns: [ json(product_id, username, rating, comment(optional), createdAt, updatedAt) ]
returns 200, 500



-------------ALL below requires auth ( jwt token in header "Authorization: Bearer <token>"   )  (token is given via httponly cookie after login)------------------

/api/product/getProfile
GET
returns: username, email, createdAt
returns 200, 500

/api/user/editProfile //todo
header: "Authorization: Bearer {token}" 
PATCH body optional: password, 
returns: message


/api/order/confirm
header: "Authorization: Bearer {token}" 
POST body required: "order_list": [{"product_id": "665b60e31271676dae7eb112", "quantity": "50"}]       ie an array of {product type and qty}
returns: message

/api/cart/hasCart    //boolean for cart icon (active vs empty cart icon)
header: "Authorization: Bearer {token}" 
GET
returns: {cart: true} OR {cart: false}
returns 200, 500


/api/cart/getCart   
header: "Authorization: Bearer {token}" 
GET
returns: [ json(product_id, product_name, qty) ]
returns 200, 500


/api/cart/updateCart             //one product type per api call, NOT an array. u can just spam with ajax on cart page for qty < 1 > type Ui
header: "Authorization: Bearer {token}" 
POST: {product_id: xxx, quantity: 4}
returns: message
returns 400, 201, 500


// Email sending
/api/email/send2faEmail_ResetPassword           // use after user entered email to generate 2fa
POST: {email: xxx}
returns: message
returns 400, 200, 500

/api/email/sendResetPasswordEmail               //use after user enters 2fa
POST: {email : xxx, otpToken: xxx}
returns: message
returns 400, 200, 500


todo:
mongo access control
centralised validation regex
change db bigint to number
_tests