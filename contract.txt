/api/user/addUser
POST body required: username, password, email
returns: message
returns 400, 201, 500

/api/product/getProduct
GET body optional: brand, animal etc (filter) (to view all, have no input fields)
returns: product array json (lmk if u need pagination)
returns 200, 500

/api/review/getReview?product_id=xxx     (get all reviews for a specific product)
GET
returns: [ json(product_id, username, rating, comment(optional), createdAt, updatedAt) ]
returns 200, 500

-------------------- Reset Password --------------------
/*
    Pre Req Steps:
    - User clicks on Reset Password button, and is brought to page to enter email
    - User posts email to server
*/
1. /api/email/send2faEmail_ResetPassword        // use after user enters email and submits
POST: {email: xxx}
returns: message
returns 400, 200, 500

// Step 1 explanation:
    - system validates if user with specified email exists 
    - system generates otp and sends to user's email

/*
    Next Steps:
    - system brings user to page to enter 2FA token
    - user posts 2fa token
*/

2. /api/email/sendResetPasswordEmail            // use after user enters otp sent to email, and clicks submit
POST: {email : xxx, otpToken: xxx}
returns: message
returns 400, 200, 500

// Step 2 explanation:
    - system validates 2fa token
    - system generates reset token and sends reset password link with generated token to user's email

/*
    Next Steps:
    - User clicks on reset password link, and enters new password 
        - both reset password token and new password are sent to server, where password of user account is then changed
*/

3. /api/user/reset-password                     //use after user clicks on reset password link sent to user's email and enters new password
POST: {resetToken: xxx, newPassword : xxx}
returns: message
returns 401, 400, 200, 500

// Step 3 explanation
    - system changes user password to new password

-------------------- Login --------------------
// old login method
/api/user/login
POST body required: username, password, otpToken
returns: message, jwt token httpOnly cookie 
returns 404, 401, 400, 200, 500

// new login method
/*
    Pre Req Steps
    - User clicks on Login button
    - Login Popup appears
    - User enters login info (username and password) and sends to server
*/

1. /api/email/send2faEmail_Login                   //use when user submit login info
POST: {username : xxx, password : xxx}
returns: message
returns 404, 401, 400, 200, 500

// Step 1 explanation
    - system checks if user entered correct details
    - system generates otp and sends to user's email

/*
    Next Steps
    - system brings user to page to enter otp
    - user enters otp (submits username + password + otp)
*/

2. /api/user/login_2fa                              // use after user enters otp on otp popup
POST body required: username, password, otpToken
returns: message, jwt token httpOnly cookie 
returns 404, 401, 400, 200, 500

// Step 2 explanation
    - system verifies user creds
    - system verifies otp
    - logs user in, and returns user deets + jwt token

-------------ALL below requires auth ( jwt token in header "Authorization: Bearer <token>"   )  (token is given via httponly cookie after login)------------------

/api/product/getProfile
GET
returns: username, email, createdAt
returns 200, 500

/api/user/editProfile //todo
header: "Authorization: Bearer {token}" 
PATCH body optional: password, 
returns: message


/api/order/confirm
header: "Authorization: Bearer {token}" 
POST body required: "order_list": [{"product_id": "665b60e31271676dae7eb112", "quantity": "50"}]       ie an array of {product type and qty}
returns: message

/api/cart/hasCart    //boolean for cart icon (active vs empty cart icon)
header: "Authorization: Bearer {token}" 
GET
returns: {cart: true} OR {cart: false}
returns 200, 500


/api/cart/getCart   
header: "Authorization: Bearer {token}" 
GET
returns: [ json(product_id, product_name, qty) ]
returns 200, 500


/api/cart/updateCart             //one product type per api call, NOT an array. u can just spam with ajax on cart page for qty < 1 > type Ui
header: "Authorization: Bearer {token}" 
POST: {product_id: xxx, quantity: 4}
returns: message
returns 400, 201, 500

/api/review/addReview  
header: "Authorization: Bearer {token}" 
POST: {product_id: xxx, rating: 1-5, comment (optional + 500 chars and below)}
returns: message
returns 400, 201, 500


======== TODO ===========
- mongo access control

- edit admin add product
    -> name of breedSize change to petSize
    -> additional field called petAge


- create API for recommend me page 
    -> based on the user pet's petSize and petAge 
    -> do a match and find first record 
    -> Return: entire product table of that matched product in JSON response


    
